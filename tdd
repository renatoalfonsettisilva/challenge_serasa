graph TD
[Estratégia de Testes de API com Cypress e Trello] --> {Foco Principal};
[Manutenibilidade];
[Reusabilidade];
[Cobertura de Testes de API];

[Estrutura do Projeto];
[cypress/integration/api: Testes de API (.spec.js)];
[cypress/support: Comandos Customizados & Configurações Globais];
[commands.js: Funções reutilizáveis (e.g., 'createBoard', 'createCard')];
[cypress/fixtures: Dados de Teste (e.g., test_data.json)];
[cypress.json: Variáveis de Ambiente e Configurações];

[Preparação do Ambiente];
[Obtenção de API Key e Token Trello];
[Garantir Segurança: Variáveis de Ambiente Cypress];
[Instalação e Configuração Cypress];
[Criação de Board/Lista Inicial (hook 'before')];

[Implementação dos Testes];
[Uso de cy.request() para Interações com API];
[Métodos HTTP: POST, GET, DELETE];
[Parâmetros de Query: key, token, name, idList, etc.];
[Testes Atomicos por Ação];
[Cadastrar Board];
[Cadastrar Card];
[Excluir Card];
[Excluir Board];
[Asserções (expect().to.eq(), to.have.property(), etc.)];
[Verificar Status HTTP (200, 404)];
[Verificar Estrutura e Conteúdo da Resposta];
[Limpeza do Ambiente (hook 'after')];
[Excluir Board Criado no 'before'];

[Boas Práticas];
[Isolamento de Testes: Cada teste deve ser independente];
[Dados de Teste Dinâmicos vs. Estáticos];
[Logs Claros (cy.log())];
[Tratamento de Erros (failOnStatusCode: false para verificar 404)];
[Reuso de Código via 'commands.js'];
[Uso de Variáveis de Ambiente para Credenciais];
